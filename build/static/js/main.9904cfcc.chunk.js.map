{"version":3,"sources":["pages/About/About.js","pages/Portfolio/Portfolio.js","pages/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["About","Portfolio","props","Card","CardImg","top","width","src","alt","CardBody","CardTitle","CardSubtitle","CardText","Button","Contact","Container","Row","Col","xs","Form","FormGroup","Label","for","Input","type","name","id","App","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9904cfcc.chunk.js","sourcesContent":["import React from 'react'\n\nconst About = () => {\n    return (\n        <>\n        <h1>This is About Me page</h1>\n\n        <h2>Entering college about eight years ago, my parents told me that this is the time of your life where you decide\n          who you will become. Quite a scary thought for someone that liked little bits and pieces of each subject I\n          learned in school. I decided to major in Chemistry, something I did moderately well in high school and could\n          lead to the path of becoming a pharmacist, the phrase a lot of my peers around me mentioned more so because of\n          their parents then because of themselves. Nevertheless, my experience in college life led me to find genuine\n          interest in Computer as well as Web Development. I have posted my projects and several coursework on portfolio\n          page.</h2>\n        </>\n    )\n}\n\nexport default About ","import React from 'react';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button\n} from 'reactstrap';\n\nconst Portfolio = (props) => {\n  return (\n    <div>\n      <Card>\n        <CardImg top width=\"100%\" src=\"./assets/images/pokemon.png\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle>Pokemon</CardTitle>\n          <CardSubtitle>Project 1</CardSubtitle>\n          <CardText>We made a Pokemon site with the database of\n              pokemons and p-cards!</CardText>\n          <Button>Button</Button>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardImg top width=\"100%\" src=\"/assets/318x180.svg\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle>Lifetrack</CardTitle>\n          <CardSubtitle>Project 2</CardSubtitle>\n          <CardText>We created a life track application that tracks our to do list, fitness, and diaries.</CardText>\n          <Button>Button</Button>\n        </CardBody>\n      </Card>\n      <Card>\n        <CardImg top width=\"100%\" src=\"/assets/318x180.svg\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle>Dungeon Sheets</CardTitle>\n          <CardSubtitle>Project 3</CardSubtitle>\n          <CardText>We made Dungeon sheets with log in site for users and character genertor, dice roll, and character sheet.</CardText>\n          <Button>Button</Button>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default Portfolio;","import React from 'react'\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    FormText,\n    Container,\n    Row,\n    Col\n  } from 'reactstrap'\n\nconst Contact = () => {\n  return (\n    <Container>\n      <Row>\n        <Col xs=\"12\">\n          <Form>\n            <FormGroup>\n              <Label for=\"name\">Name</Label>\n              <Input type=\"text\" name=\"name\" id=\"name\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleEmail\">Email</Label>\n              <Input type=\"email\" name=\"email\" id=\"exampleEmail\" />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleMessage\">Message</Label>\n              <Input type=\"message\" name=\"message\" id=\"exampleMessage\" />\n            </FormGroup>\n            <Button>Submit</Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n\n  )\n}\n\nexport default Contact","import React, { useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport About from './pages/About'\nimport Portfolio from './pages/Portfolio'\nimport Contact from './pages/Contact'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap'\nimport './App.css'\n\nconst App = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <Router>\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand>My App</NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink><Link className=\"link\" to=\"/\">About</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link className=\"link\" to=\"/portfolio\">Portfolio</Link></NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink><Link className=\"link\" to=\"/contact\">Contact</Link></NavLink>\n              </NavItem>  \n            </Nav>\n          </Collapse>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/portfolio\" component={Portfolio} /> \n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}